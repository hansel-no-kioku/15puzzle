(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };                                    
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };                                    
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["EqRecord"] = EqRecord;
  exports["eqRecord"] = eqRecord;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  }; 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ v.constructor.name ]);
          };
      };
  }; 
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 231, column 62: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 8 - line 35, column 52: " + [ m.constructor.name ]);
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["functorEither"] = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar19) {
                      return $dollar19;
                  };
              };
              return $__unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 111, column 30 - line 111, column 44: " + [ v.constructor.name ]);
              })());
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = Effect_Ref.read(v)();
                      if (v1 instanceof Loop) {
                          var v2 = f(v1.value0)();
                          var v3 = Effect_Ref.write(v2)(v)();
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 102, column 22 - line 107, column 28: " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEffect"] = monadRecEffect;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Effect = PS["Effect"];                 
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS["Effect.Class"] = PS["Effect.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($114) {
          return Data_Maybe.maybe([  ])(singleton)(f($114));
      });
  };
  exports["singleton"] = singleton;
  exports["head"] = head;
  exports["index"] = index;
  exports["elemIndex"] = elemIndex;
  exports["findIndex"] = findIndex;
  exports["updateAt"] = updateAt;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["zipWithA"] = zipWithA;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["snoc"] = $foreign.snoc;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];                 
  var runFn1 = function (f) {
      return f;
  };
  exports["runFn1"] = runFn1;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {function wrap(method) {
    return function(d) {
      return function(num) {
        return method.apply(num, [d]);
      };
    };
  }

  exports.toPrecisionNative   = wrap(Number.prototype.toPrecision);
  exports.toFixedNative       = wrap(Number.prototype.toFixed);
  exports.toExponentialNative = wrap(Number.prototype.toExponential);
})(PS["Data.Number.Format"] = PS["Data.Number.Format"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Number.Format"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];                 
  var Precision = (function () {
      function Precision(value0) {
          this.value0 = value0;
      };
      Precision.create = function (value0) {
          return new Precision(value0);
      };
      return Precision;
  })();
  var Fixed = (function () {
      function Fixed(value0) {
          this.value0 = value0;
      };
      Fixed.create = function (value0) {
          return new Fixed(value0);
      };
      return Fixed;
  })();
  var Exponential = (function () {
      function Exponential(value0) {
          this.value0 = value0;
      };
      Exponential.create = function (value0) {
          return new Exponential(value0);
      };
      return Exponential;
  })();
  var toStringWith = function (v) {
      if (v instanceof Precision) {
          return $foreign.toPrecisionNative(v.value0);
      };
      if (v instanceof Fixed) {
          return $foreign.toFixedNative(v.value0);
      };
      if (v instanceof Exponential) {
          return $foreign.toExponentialNative(v.value0);
      };
      throw new Error("Failed pattern match at Data.Number.Format line 59, column 1 - line 59, column 40: " + [ v.constructor.name ]);
  };
  var fixed = function ($6) {
      return Fixed.create(Data_Ord.clamp(Data_Ord.ordInt)(0)(20)($6));
  };
  exports["fixed"] = fixed;
  exports["toStringWith"] = toStringWith;
})(PS["Data.Number.Format"] = PS["Data.Number.Format"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["catchException"] = $foreign.catchException;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                          
  var functorAff = new Data_Functor.Functor($foreign._map);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff line 395, column 21 - line 397, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff line 390, column 20 - line 394, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff line 385, column 12 - line 387, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = function ($49) {
      return Data_Functor["void"](Effect.functorEffect)(launchAff($49));
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function(exports) {
    "use strict";

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffectFn2 = function runEffectFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffectFn3 = function runEffectFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffectFn4 = function runEffectFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };

  exports.runEffectFn5 = function runEffectFn5(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function(e) {
              return function() {
                return fn(a, b, c, d, e);
              };
            };
          };
        };
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Uncurried"];
  var Effect = PS["Effect"];
  exports["runEffectFn1"] = $foreign.runEffectFn1;
  exports["runEffectFn2"] = $foreign.runEffectFn2;
  exports["runEffectFn3"] = $foreign.runEffectFn3;
  exports["runEffectFn4"] = $foreign.runEffectFn4;
  exports["runEffectFn5"] = $foreign.runEffectFn5;
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Main

  /* global phina */

  exports._runGame = function(app) {
    phina.main(function() {
      app.run();
    });
    return {};
  };

  exports.entryScene = function(e, s) {
    var className = 'myScene.' + s.label;
    var ref;
    var superClass
      = (ref = phina.display[s.baseClass]) != null ? ref : phina.game[s.baseClass];

    phina.define('phina.game.' + className, {
      superClass: superClass,

      init: function(params) {
        this.superInit(params);

        return s.setup(params)(e)(this)();
      }
    });

    return {
      className: className,
      label: s.label,
      nextLabel: s.nextLabel
    };
  };

  exports.entryMainScene = function(exit, setup) {
    phina.define('phina.game.MainScene', {
      superClass: phina.display.DisplayScene,

      init: function(params) {
        this.superInit(params);

        return setup(params)(exit)(this)();
      }
    });

    return {};
  };
})(PS["Phina.Main"] = PS["Phina.Main"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Display.DisplayScene

  /* global phina */

  var exit = function(params) {
    return function(scene) {
      return function() {
        scene.exit(params);
        return scene;
      };
    };
  };

  exports.exit = exit;

  exports._popup = function(s, params, scene) {
    var klass;

    if ((klass = getClass(s.baseClass)) == null) {
      if ((klass = phina.display[s.baseClass]) == null) {
        if ((klass = phina.game[s.baseClass]) == null) {
          throw Error('Scene ' + s.baseClass + ' is not found.');
        }
      }
    }

    return function(callback) {
      return function() {
        var func = function() {
          scene.one('resume', function(r) {
            callback(r.prevScene.nextArguments)();
          });

          scene.app.pushScene(s.setup(params)(exit)(klass({
            width: scene.width,
            height: scene.height
          }))());

          return;
        };

        scene.app != null ? func() : scene.on('enter', func);

        return {};
      };
    };
  };

  var getClass = function(path) {
    return path.split(/[,./ ]|::/).reduce(
      function(c, a) {
        return c != null ? c[a] : null;
      },
      phina.global
    );
  };
})(PS["Phina.Display.DisplayScene"] = PS["Phina.Display.DisplayScene"] || {});
(function(exports) {

  exports._setUpdater = function(updater, element) {
    element.update = function(ap) {
      updater(ap)(this)();
    };
    return element;
  };

  exports._addChild = function(child, parent) {
    parent.addChild(child);
    return parent;
  };
})(PS["Phina.App.Element"] = PS["Phina.App.Element"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Core.Color

  exports.nullColor = null;
})(PS["Phina.Types.Color"] = PS["Phina.Types.Color"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Color"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var color = Unsafe_Coerce.unsafeCoerce;
  exports["color"] = color;
  exports["nullColor"] = $foreign.nullColor;
})(PS["Phina.Types.Color"] = PS["Phina.Types.Color"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Int = PS["Data.Int"];
  var Prelude = PS["Prelude"];                 
  var Numerical = function (number) {
      this.number = number;
  };                                                                                          
  var numericalInt = new Numerical(Data_Int.toNumber);
  var number = function (dict) {
      return dict.number;
  };
  exports["Numerical"] = Numerical;
  exports["number"] = number;
  exports["numericalInt"] = numericalInt;
})(PS["Phina.Types.Numerical"] = PS["Phina.Types.Numerical"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Prelude = PS["Prelude"];                 
  var Duration = function (x) {
      return x;
  };
  var toSec = function (v) {
      return v / 1000.0;
  };                                      
  var semiringDuration = Data_Semiring.semiringNumber;
  var sec = function (dictNumerical) {
      return function ($18) {
          return Duration((function (v) {
              return v * 1000.0;
          })(Phina_Types_Numerical.number(dictNumerical)($18)));
      };
  };           
  var msec = function (dictNumerical) {
      return function ($19) {
          return Duration(Phina_Types_Numerical.number(dictNumerical)($19));
      };
  };
  exports["sec"] = sec;
  exports["msec"] = msec;
  exports["toSec"] = toSec;
  exports["semiringDuration"] = semiringDuration;
})(PS["Phina.Types.Duration"] = PS["Phina.Types.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var SubRow = {};
  var subRowInstance = function (dictUnion) {
      return SubRow;
  };
  exports["SubRow"] = SubRow;
  exports["subRowInstance"] = subRowInstance;
})(PS["Phina.Types.Row"] = PS["Phina.Types.Row"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Unsafe

  /* global phina */

  exports._unsafeGetProp = function(label, instance) {
    return instance[label];
  };

  exports._unsafeSetProp = function(label, value, instance) {
    instance[label] = value;
    return instance;
  };

  exports._unsafeSetProps = function(src, dest) {
    var own = Object.prototype.hasOwnProperty;

    for (var key in src) {
      if (own.call(src, key)) {
        dest[key] = src[key];
      }
    }

    return dest;
  };

  exports._unsafeNew = function(module, klass, params) {
    return phina[module][klass](params);
  };
})(PS["Phina.Unsafe"] = PS["Phina.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Unsafe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];                 
  var unsafeSetProps = Effect_Uncurried.runEffectFn2($foreign._unsafeSetProps);
  var unsafeSetProp = Effect_Uncurried.runEffectFn3($foreign._unsafeSetProp);
  var unsafeNew = Effect_Uncurried.runEffectFn3($foreign._unsafeNew);
  var unsafeGetProp = Data_Function_Uncurried.runFn2($foreign._unsafeGetProp);
  exports["unsafeGetProp"] = unsafeGetProp;
  exports["unsafeSetProp"] = unsafeSetProp;
  exports["unsafeSetProps"] = unsafeSetProps;
  exports["unsafeNew"] = unsafeNew;
})(PS["Phina.Unsafe"] = PS["Phina.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Type_Data_Boolean = PS["Type.Data.Boolean"];
  var Type_Data_Symbol = PS["Type.Data.Symbol"];
  var Type_Equality = PS["Type.Equality"];
  var ListToRow = {};
  var listToRowNil = ListToRow;
  var listToCons = function (dictListToRow) {
      return function (dictCons) {
          return ListToRow;
      };
  };
  exports["ListToRow"] = ListToRow;
  exports["listToRowNil"] = listToRowNil;
  exports["listToCons"] = listToCons;
})(PS["Type.Row"] = PS["Type.Row"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Property"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var ReadableAttr = {};
  var WritableAttr = {};
  var HasProperty = {};
  var ReadableProp = {};
  var WritableProp = {};
  var ReadableRL = function (ListToRow1, RowToList0) {
      this.ListToRow1 = ListToRow1;
      this.RowToList0 = RowToList0;
  };
  var WritableRL = function (ListToRow1, RowToList0) {
      this.ListToRow1 = ListToRow1;
      this.RowToList0 = RowToList0;
  };
  var Readable = {};
  var Writable = {};
  var writableRecord = function (dictRowToList) {
      return function (dictListToRow) {
          return function (dictWritableRL) {
              return Writable;
          };
      };
  };
  var writableRLNil = new WritableRL(function () {
      return Type_Row.listToRowNil;
  }, function () {
      return undefined;
  });
  var writableRLCons = function (dictRowToList) {
      return function (dictCons) {
          return function (dictListToRow) {
              return function (dictWritableProp) {
                  return function (dictWritableRL) {
                      return new WritableRL(function () {
                          return Type_Row.listToCons(dictListToRow)(dictCons);
                      }, function () {
                          return dictRowToList;
                      });
                  };
              };
          };
      };
  };
  var writableProp = function (dictHasProperty) {
      return function (dictReadableAttr) {
          return function (dictCons) {
              return function (dictSubRow) {
                  return WritableProp;
              };
          };
      };
  };
  var writableAttrWrite = WritableAttr;
  var writableAttrDash = WritableAttr;
  var setProps = function (dictWritable) {
      return Phina_Unsafe.unsafeSetProps;
  };
  var setProp = function (dictIsSymbol) {
      return function (dictWritableProp) {
          return function (s) {
              return Phina_Unsafe.unsafeSetProp(Data_Symbol.reflectSymbol(dictIsSymbol)(s));
          };
      };
  };                                          
  var readableRecord = function (dictRowToList) {
      return function (dictListToRow) {
          return function (dictReadableRL) {
              return Readable;
          };
      };
  };
  var readableRLNil = new ReadableRL(function () {
      return Type_Row.listToRowNil;
  }, function () {
      return undefined;
  });
  var readableRLCons = function (dictRowToList) {
      return function (dictCons) {
          return function (dictListToRow) {
              return function (dictReadableProp) {
                  return function (dictReadableRL) {
                      return new ReadableRL(function () {
                          return Type_Row.listToCons(dictListToRow)(dictCons);
                      }, function () {
                          return dictRowToList;
                      });
                  };
              };
          };
      };
  };
  var readableProp = function (dictHasProperty) {
      return function (dictWritableAttr) {
          return function (dictCons) {
              return function (dictSubRow) {
                  return ReadableProp;
              };
          };
      };
  };
  var readableAttrRead = ReadableAttr;
  var getProps = function (dictReadable) {
      return function ($35) {
          return Control_Applicative.pure(Effect.applicativeEffect)($35);
      };
  };
  var getProp = function (dictIsSymbol) {
      return function (dictReadableProp) {
          return function (s) {
              return function ($36) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Phina_Unsafe.unsafeGetProp(Data_Symbol.reflectSymbol(dictIsSymbol)(s))($36));
              };
          };
      };
  };
  exports["ReadableAttr"] = ReadableAttr;
  exports["WritableAttr"] = WritableAttr;
  exports["HasProperty"] = HasProperty;
  exports["ReadableProp"] = ReadableProp;
  exports["WritableProp"] = WritableProp;
  exports["ReadableRL"] = ReadableRL;
  exports["WritableRL"] = WritableRL;
  exports["Readable"] = Readable;
  exports["Writable"] = Writable;
  exports["getProp"] = getProp;
  exports["getProps"] = getProps;
  exports["setProp"] = setProp;
  exports["setProps"] = setProps;
  exports["readableAttrRead"] = readableAttrRead;
  exports["writableAttrDash"] = writableAttrDash;
  exports["writableAttrWrite"] = writableAttrWrite;
  exports["readableProp"] = readableProp;
  exports["writableProp"] = writableProp;
  exports["readableRLNil"] = readableRLNil;
  exports["readableRLCons"] = readableRLCons;
  exports["writableRLNil"] = writableRLNil;
  exports["writableRLCons"] = writableRLCons;
  exports["readableRecord"] = readableRecord;
  exports["writableRecord"] = writableRecord;
})(PS["Phina.Types.Property"] = PS["Phina.Types.Property"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Util.EventDispatcher

  exports._flare = function(event, param, instance) {
    return instance.flare(event, param);
  };
})(PS["Phina.Util.EventDispatcher"] = PS["Phina.Util.EventDispatcher"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Event = function (event) {
      this.event = event;
  };
  var EventDispatcher = {};
  var event = function (dict) {
      return dict.event;
  };
  exports["Event"] = Event;
  exports["event"] = event;
  exports["EventDispatcher"] = EventDispatcher;
})(PS["Phina.Util.EventDispatcher.Class"] = PS["Phina.Util.EventDispatcher.Class"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Util.EventDispatcher.Unsafe

  exports._on = function(event, f, instance) {
    return instance.on(event, function(params) {
      return f(params)(this)();
    });
  };
})(PS["Phina.Util.EventDispatcher.Unsafe"] = PS["Phina.Util.EventDispatcher.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];                 
  var unsafeOn = function (dictEventDispatcher) {
      return Effect_Uncurried.runEffectFn3($foreign._on);
  };
  exports["unsafeOn"] = unsafeOn;
})(PS["Phina.Util.EventDispatcher.Unsafe"] = PS["Phina.Util.EventDispatcher.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Util.EventDispatcher"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];
  var on = function (dictEvent) {
      return function (dictEventDispatcher) {
          return function (e) {
              return function (h) {
                  return Phina_Util_EventDispatcher_Unsafe.unsafeOn(dictEventDispatcher)(Phina_Util_EventDispatcher_Class.event(dictEvent)(e))(function (p) {
                      return h(p.value);
                  });
              };
          };
      };
  };
  var flare = function (dictEvent) {
      return function (dictEventDispatcher) {
          return function (e) {
              return function (p) {
                  return Effect_Uncurried.runEffectFn3($foreign._flare)(Phina_Util_EventDispatcher_Class.event(dictEvent)(e))({
                      value: p
                  });
              };
          };
      };
  };
  exports["flare"] = flare;
  exports["on"] = on;
})(PS["Phina.Util.EventDispatcher"] = PS["Phina.Util.EventDispatcher"] || {});
(function(exports) {

  exports._getCenter = function(axis, target) {
    return target[axis].center();
  };

  exports._newGrid = function(width, columns, isLoop, offset) {
    return phina.util.Grid(width, columns, isLoop, offset);
  };

  exports._span = function(index, grid) {
    return grid.span(index);
  };

  exports._unit = function(grid) {
    return grid.unit();
  };
})(PS["Phina.Util.Grid"] = PS["Phina.Util.Grid"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Types.Position

  exports._setPosition = function(pos, a) {
    a.x = pos.x;
    a.y = pos.y;
    return a;
  };
})(PS["Phina.Types.Position"] = PS["Phina.Types.Position"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Position"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var setPosition = function (dictWritable) {
      return Effect_Uncurried.runEffectFn2($foreign._setPosition);
  };
  exports["setPosition"] = setPosition;
})(PS["Phina.Types.Position"] = PS["Phina.Types.Position"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Util.Grid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var HasGrid = {};
  var newGrid = Data_Function_Uncurried.runFn4($foreign._newGrid);
  var getUnit = Data_Function_Uncurried.runFn1($foreign._unit);
  var getSpan = Data_Function_Uncurried.runFn2($foreign._span);
  var getCenterY = function (dictHasGrid) {
      return Effect_Uncurried.runEffectFn2($foreign._getCenter)("gridY");
  };
  var getCenterX = function (dictHasGrid) {
      return Effect_Uncurried.runEffectFn2($foreign._getCenter)("gridX");
  };
  var getCenterPos = function (dictHasGrid) {
      return function (t) {
          return Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(function (v) {
              return function (v1) {
                  return {
                      x: v,
                      y: v1
                  };
              };
          })(getCenterX(dictHasGrid)(t)))(getCenterY(dictHasGrid)(t));
      };
  };
  exports["HasGrid"] = HasGrid;
  exports["getCenterX"] = getCenterX;
  exports["getCenterY"] = getCenterY;
  exports["getCenterPos"] = getCenterPos;
  exports["newGrid"] = newGrid;
  exports["getSpan"] = getSpan;
  exports["getUnit"] = getUnit;
})(PS["Phina.Util.Grid"] = PS["Phina.Util.Grid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Game.GameApp"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Asset_AssetLoader = PS["Phina.Asset.AssetLoader"];
  var Phina_Input_Keyboard = PS["Phina.Input.Keyboard"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var hasPropertyGameAppReady = Phina_Types_Property.HasProperty;
  var hasPropertyGameApp = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };
  exports["hasPropertyGameAppReady"] = hasPropertyGameAppReady;
  exports["hasPropertyGameApp"] = hasPropertyGameApp;
})(PS["Phina.Game.GameApp"] = PS["Phina.Game.GameApp"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.App.Element"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];                 
  var IsElement = function (EventDispatcher0) {
      this.EventDispatcher0 = EventDispatcher0;
  };
  var Container = {};
  var setUpdater = function (dictIsElement) {
      return Effect_Uncurried.runEffectFn2($foreign._setUpdater);
  };
  var hasPropertyElement = Phina_Types_Property.HasProperty;
  var addChild = function (dictIsElement) {
      return function (dictContainer) {
          return Effect_Uncurried.runEffectFn2($foreign._addChild);
      };
  };
  exports["IsElement"] = IsElement;
  exports["setUpdater"] = setUpdater;
  exports["Container"] = Container;
  exports["addChild"] = addChild;
  exports["hasPropertyElement"] = hasPropertyElement;
})(PS["Phina.App.Element"] = PS["Phina.App.Element"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Geom_Vector2 = PS["Phina.Geom.Vector2"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var Interactive = function (EventDispatcher0) {
      this.EventDispatcher0 = EventDispatcher0;
  };
  var setInteractive = function (dictInteractive) {
      return function (dictWritableProp) {
          return Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
              return "interactive";
          }))(dictWritableProp)(Data_Symbol.SProxy.value);
      };
  };
  var onPointEnd = function (dictInteractive) {
      return Phina_Util_EventDispatcher_Unsafe.unsafeOn(dictInteractive.EventDispatcher0())("pointend");
  };
  var hasPropertyInteractive = Phina_Types_Property.HasProperty;
  exports["Interactive"] = Interactive;
  exports["onPointEnd"] = onPointEnd;
  exports["setInteractive"] = setInteractive;
  exports["hasPropertyInteractive"] = hasPropertyInteractive;
})(PS["Phina.App.Interactive"] = PS["Phina.App.Interactive"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var MonadBuilder = function (Monad1, MonadState0, build, $$eval, make, update) {
      this.Monad1 = Monad1;
      this.MonadState0 = MonadState0;
      this.build = build;
      this["eval"] = $$eval;
      this.make = make;
      this.update = update;
  };
  var update = function (dict) {
      return dict.update;
  };
  var peek = function (dictMonadBuilder) {
      return Control_Monad_State_Class.get(dictMonadBuilder.MonadState0());
  };
  var make = function (dict) {
      return dict.make;
  };
  var $$eval = function (dict) {
      return dict["eval"];
  };
  var build = function (dict) {
      return dict.build;
  };
  exports["MonadBuilder"] = MonadBuilder;
  exports["update"] = update;
  exports["eval"] = $$eval;
  exports["build"] = build;
  exports["make"] = make;
  exports["peek"] = peek;
})(PS["Phina.Types.Monad.Builder"] = PS["Phina.Types.Monad.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var Builder = function (x) {
      return x;
  };
  var newtypeBuilder = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Builder);
  var monadStateBuilder = Control_Monad_State_Trans.monadStateStateT(Effect.monadEffect);
  var monadBuilderBuilder = new Phina_Types_Monad_Builder.MonadBuilder(function () {
      return Effect.monadEffect;
  }, function () {
      return monadStateBuilder;
  }, function ($3) {
      return Control_Monad_State_Trans.execStateT(Effect.functorEffect)(Data_Newtype.unwrap(newtypeBuilder)($3));
  }, function (f) {
      return Data_Newtype.wrap(newtypeBuilder)(Control_Monad_State_Trans.StateT(function (a) {
          return Data_Functor.mapFlipped(Effect.functorEffect)(f(a))(function (b) {
              return new Data_Tuple.Tuple(b, a);
          });
      }));
  }, function (a) {
      return function (b) {
          return Control_Bind.bind(Effect.bindEffect)(a)(Phina_Types_Monad_Builder.build(monadBuilderBuilder)(b));
      };
  }, function (f) {
      return Data_Newtype.wrap(newtypeBuilder)(Control_Monad_State_Trans.StateT(function (a) {
          return Data_Functor.mapFlipped(Effect.functorEffect)(f(a))(Data_Tuple.Tuple.create(Data_Unit.unit));
      }));
  });
  var monadBuilder = Control_Monad_State_Trans.monadStateT(Effect.monadEffect);
  var monadEffectBuilder = new Effect_Class.MonadEffect(function () {
      return monadBuilder;
  }, function ($4) {
      return Data_Newtype.wrap(newtypeBuilder)(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(Effect.monadEffect)($4));
  });                                                                                
  var bindBuilder = Control_Monad_State_Trans.bindStateT(Effect.monadEffect);
  exports["newtypeBuilder"] = newtypeBuilder;
  exports["bindBuilder"] = bindBuilder;
  exports["monadBuilder"] = monadBuilder;
  exports["monadStateBuilder"] = monadStateBuilder;
  exports["monadBuilderBuilder"] = monadBuilderBuilder;
  exports["monadEffectBuilder"] = monadEffectBuilder;
})(PS["Phina.Types.Builder"] = PS["Phina.Types.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var Async = function (x) {
      return x;
  };                                                                                            
  var newtypeAsync = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Async);
  var makeAsync = function (f) {
      return Data_Newtype.wrap(newtypeAsync)(function (a) {
          return Effect_Aff.makeAff(function (cb) {
              return f(a)(function (r) {
                  return cb(Data_Functor.map(Data_Either.functorEither)(function (b) {
                      return new Data_Tuple.Tuple(b, a);
                  })(r));
              });
          });
      });
  };
  var makeAsync$prime = function (f) {
      return makeAsync(function (a) {
          return function (cb) {
              return function __do() {
                  Effect_Exception.catchException(function ($5) {
                      return cb(Data_Either.Left.create($5));
                  })(f(a)(function ($6) {
                      return cb(Data_Either.Right.create($6));
                  }))();
                  return Effect_Aff.nonCanceler;
              };
          };
      });
  };                                                   
  var launchAsync$prime = function (b) {
      return function (a) {
          return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](a))(Effect_Aff.launchAff_(Control_Monad_State_Trans.evalStateT(Effect_Aff.functorAff)(Data_Newtype.unwrap(newtypeAsync)(b))(a)));
      };
  };
  exports["makeAsync"] = makeAsync;
  exports["makeAsync'"] = makeAsync$prime;
  exports["launchAsync'"] = launchAsync$prime;
  exports["newtypeAsync"] = newtypeAsync;
})(PS["Phina.Types.Async"] = PS["Phina.Types.Async"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Types.Size"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var hasPropertySize = Phina_Types_Property.HasProperty;
  var getSize = function (dictReadable) {
      return Phina_Types_Property.getProps(dictReadable);
  };
  exports["getSize"] = getSize;
  exports["hasPropertySize"] = hasPropertySize;
})(PS["Phina.Types.Size"] = PS["Phina.Types.Size"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Display.DisplayScene"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Input_Keyboard = PS["Phina.Input.Keyboard"];
  var Phina_Types_Async = PS["Phina.Types.Async"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_EventDispatcher_Unsafe = PS["Phina.Util.EventDispatcher.Unsafe"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var IsScene = function (Container2, EventDispatcher0, HasGrid3, Interactive4, IsElement1, className) {
      this.Container2 = Container2;
      this.EventDispatcher0 = EventDispatcher0;
      this.HasGrid3 = HasGrid3;
      this.Interactive4 = Interactive4;
      this.IsElement1 = IsElement1;
      this.className = className;
  };
  var hasPropertySceneProps = function (dictHasProperty) {
      return function (dictHasProperty1) {
          return function (dictHasProperty2) {
              return function (dictUnion) {
                  return function (dictUnion1) {
                      return function (dictUnion2) {
                          return Phina_Types_Property.HasProperty;
                      };
                  };
              };
          };
      };
  };
  var hasPropertyDisplayScene = function (dictHasProperty) {
      return Phina_Types_Property.HasProperty;
  };
  var hasGridDisplayScene = Phina_Util_Grid.HasGrid;
  var edDisplayScene = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveDisplayScene = new Phina_App_Interactive.Interactive(function () {
      return edDisplayScene;
  });
  var isElementDisplayScene = new Phina_App_Element.IsElement(function () {
      return edDisplayScene;
  });
  var containerDisplayScene = Phina_App_Element.Container;
  var isSceneDisplayScene = new IsScene(function () {
      return containerDisplayScene;
  }, function () {
      return edDisplayScene;
  }, function () {
      return hasGridDisplayScene;
  }, function () {
      return interactiveDisplayScene;
  }, function () {
      return isElementDisplayScene;
  }, function (v) {
      return "DisplayScene";
  });
  var className = function (dict) {
      return dict.className;
  };
  var popup = function (dictIsScene) {
      return function (dictIsScene1) {
          return function (h) {
              return function ($23) {
                  return Phina_Types_Async["makeAsync'"](Data_Function_Uncurried.runFn3($foreign._popup)({
                      baseClass: className(dictIsScene)(Type_Proxy["Proxy"].value),
                      setup: h
                  })($23));
              };
          };
      };
  };
  var popup$prime = function (dictIsScene) {
      return function (dictIsScene1) {
          return function (h) {
              return function ($24) {
                  return Phina_Types_Async["launchAsync'"](popup(dictIsScene)(dictIsScene1)(h)($24));
              };
          };
      };
  };
  exports["IsScene"] = IsScene;
  exports["className"] = className;
  exports["popup"] = popup;
  exports["popup'"] = popup$prime;
  exports["hasPropertySceneProps"] = hasPropertySceneProps;
  exports["hasPropertyDisplayScene"] = hasPropertyDisplayScene;
  exports["edDisplayScene"] = edDisplayScene;
  exports["isElementDisplayScene"] = isElementDisplayScene;
  exports["containerDisplayScene"] = containerDisplayScene;
  exports["hasGridDisplayScene"] = hasGridDisplayScene;
  exports["interactiveDisplayScene"] = interactiveDisplayScene;
  exports["isSceneDisplayScene"] = isSceneDisplayScene;
  exports["exit"] = $foreign.exit;
})(PS["Phina.Display.DisplayScene"] = PS["Phina.Display.DisplayScene"] || {});
(function(exports) {//-----------------------------------------------------------------------------
  // Phina.Game.Scene

  exports.countDefault = void 8;
})(PS["Phina.Game.Scene"] = PS["Phina.Game.Scene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Game.Scene"];
  var Control_Applicative = PS["Control.Applicative"];
  var Effect = PS["Effect"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Asset_AssetLoader = PS["Phina.Asset.AssetLoader"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var IsGameScene = function (IsScene0) {
      this.IsScene0 = IsScene0;
  };
  var toSceneHandle$prime = function (dictIsGameScene) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var hasPropertyCountScene = function (dictHasProperty) {
      return Phina_Types_Property.HasProperty;
  };                                                
  var hasGridCountScene = Phina_Util_Grid.HasGrid;
  var edCountScene = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveCountScene = new Phina_App_Interactive.Interactive(function () {
      return edCountScene;
  });
  var isElementCountScene = new Phina_App_Element.IsElement(function () {
      return edCountScene;
  });                                                                                                    
  var containerCountScene = Phina_App_Element.Container;
  var isSceneCountScene = new Phina_Display_DisplayScene.IsScene(function () {
      return containerCountScene;
  }, function () {
      return edCountScene;
  }, function () {
      return hasGridCountScene;
  }, function () {
      return interactiveCountScene;
  }, function () {
      return isElementCountScene;
  }, function (v) {
      return "CountScene";
  });
  var isGameSceneCountScene = new IsGameScene(function () {
      return isSceneCountScene;
  });
  exports["IsGameScene"] = IsGameScene;
  exports["toSceneHandle'"] = toSceneHandle$prime;
  exports["hasPropertyCountScene"] = hasPropertyCountScene;
  exports["edCountScene"] = edCountScene;
  exports["isElementCountScene"] = isElementCountScene;
  exports["containerCountScene"] = containerCountScene;
  exports["hasGridCountScene"] = hasGridCountScene;
  exports["interactiveCountScene"] = interactiveCountScene;
  exports["isSceneCountScene"] = isSceneCountScene;
  exports["isGameSceneCountScene"] = isGameSceneCountScene;
  exports["countDefault"] = $foreign.countDefault;
})(PS["Phina.Game.Scene"] = PS["Phina.Game.Scene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Main"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Asset_AssetLoader = PS["Phina.Asset.AssetLoader"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Game_Scene = PS["Phina.Game.Scene"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var Splash = (function () {
      function Splash() {

      };
      Splash.value = new Splash();
      return Splash;
  })();
  var Title = (function () {
      function Title() {

      };
      Title.value = new Title();
      return Title;
  })();
  var Main = (function () {
      function Main() {

      };
      Main.value = new Main();
      return Main;
  })();
  var Result = (function () {
      function Result() {

      };
      Result.value = new Result();
      return Result;
  })();
  var SceneList = (function () {
      function SceneList(value0) {
          this.value0 = value0;
      };
      SceneList.create = function (value0) {
          return new SceneList(value0);
      };
      return SceneList;
  })();
  var SceneListDefault = (function () {
      function SceneListDefault(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SceneListDefault.create = function (value0) {
          return function (value1) {
              return new SceneListDefault(value0, value1);
          };
      };
      return SceneListDefault;
  })();
  var runGame = Effect_Uncurried.runEffectFn1($foreign._runGame);
  var entrySceneListDefault = function (startScene) {
      return function (setup) {
          var startLabel = function (v) {
              if (v instanceof Splash) {
                  return "splash";
              };
              if (v instanceof Title) {
                  return "title";
              };
              if (v instanceof Main) {
                  return "main";
              };
              if (v instanceof Result) {
                  return "result";
              };
              throw new Error("Failed pattern match at Phina.Main line 145, column 5 - line 146, column 5: " + [ v.constructor.name ]);
          };
          return function __do() {
              $foreign.entryMainScene(Phina_Display_DisplayScene.exit, setup);
              return {
                  list: Data_Maybe.Nothing.value,
                  startLabel: Data_Maybe.Just.create(startLabel(startScene))
              };
          };
      };
  };
  var entrySceneList = function (list) {
      var getLabel = function (scene) {
          return scene.label;
      };
      return function __do() {
          var v = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Effect_Uncurried.runEffectFn2($foreign.entryScene)(Phina_Display_DisplayScene.exit))(list)();
          return {
              list: new Data_Maybe.Just(v),
              startLabel: Data_Functor.map(Data_Maybe.functorMaybe)(getLabel)(Data_Array.head(v))
          };
      };
  };
  var entryScenes = function (v) {
      if (v instanceof SceneList) {
          return entrySceneList(v.value0);
      };
      if (v instanceof SceneListDefault) {
          return entrySceneListDefault(v.value0)(v.value1);
      };
      throw new Error("Failed pattern match at Phina.Main line 129, column 1 - line 129, column 49: " + [ v.constructor.name ]);
  };
  var newGame = function (dictSubRow) {
      return function (params) {
          return function (scenes) {
              var setStartL = function (tl) {
                  return function (config) {
                      return Data_Maybe["maybe'"](function (v) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(config);
                      })(function (l) {
                          return Phina_Unsafe.unsafeSetProp("startLabel")(l)(config);
                      })(tl.startLabel);
                  };
              };
              var setScenes = function (tl) {
                  return function (config) {
                      return Data_Maybe["maybe'"](function (v) {
                          return Control_Applicative.pure(Effect.applicativeEffect)(config);
                      })(function (t) {
                          return Phina_Unsafe.unsafeSetProp("scenes")(t)(config);
                      })(tl.list);
                  };
              };
              var makeConfig = function (p) {
                  return function (transList) {
                      return Control_Bind.composeKleisli(Effect.bindEffect)(Phina_Unsafe.unsafeSetProps(p))(Control_Bind.composeKleisli(Effect.bindEffect)(setScenes(transList))(setStartL(transList)));
                  };
              };
              return function __do() {
                  var v = entryScenes(scenes)();
                  var v1 = makeConfig(params)(v)({})();
                  return Phina_Unsafe.unsafeNew("game")("GameApp")(v1)();
              };
          };
      };
  };
  exports["Splash"] = Splash;
  exports["Title"] = Title;
  exports["Main"] = Main;
  exports["Result"] = Result;
  exports["SceneList"] = SceneList;
  exports["SceneListDefault"] = SceneListDefault;
  exports["newGame"] = newGame;
  exports["runGame"] = runGame;
})(PS["Phina.Main"] = PS["Phina.Main"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var setUpdaterB = function (dictIsElement) {
      return function ($7) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_App_Element.setUpdater(dictIsElement)($7));
      };
  };
  var addChildB = function (dictIsElement) {
      return function (dictContainer) {
          return function ($9) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_App_Element.addChild(dictIsElement)(dictContainer)($9));
          };
      };
  };
  var addChildB$prime = function (dictIsElement) {
      return function (dictContainer) {
          return function (m) {
              return Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Effect_Class.liftEffect(Phina_Types_Builder.monadEffectBuilder)(m))(addChildB(dictIsElement)(dictContainer));
          };
      };
  };
  exports["setUpdaterB"] = setUpdaterB;
  exports["addChildB"] = addChildB;
  exports["addChildB'"] = addChildB$prime;
})(PS["Phina.App.Element.Builder"] = PS["Phina.App.Element.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Prelude = PS["Prelude"];
  var onB = function (dictEvent) {
      return function (dictEventDispatcher) {
          return function (e) {
              return function (h) {
                  return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Util_EventDispatcher.on(dictEvent)(dictEventDispatcher)(e)(h));
              };
          };
      };
  };
  exports["onB"] = onB;
})(PS["Phina.Util.EventDispatcher.Builder"] = PS["Phina.Util.EventDispatcher.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Effect_Random = PS["Effect.Random"];
  var Prelude = PS["Prelude"];                 
  var Tile = (function () {
      function Tile(value0) {
          this.value0 = value0;
      };
      Tile.create = function (value0) {
          return new Tile(value0);
      };
      return Tile;
  })();
  var Null = (function () {
      function Null() {

      };
      Null.value = new Null();
      return Null;
  })();
  var Shuffle = (function () {
      function Shuffle(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Shuffle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Shuffle(value0, value1, value2);
              };
          };
      };
      return Shuffle;
  })();
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var posToIndex = function (pos) {
      return (pos.y * 4 | 0) + pos.x | 0;
  };
  var nextTilePos = function (v) {
      return function (v1) {
          if (v1 instanceof Up && v.y > 0) {
              return Data_Maybe.Just.create({
                  y: v.y - 1 | 0,
                  x: v.x
              });
          };
          if (v1 instanceof Right && v.x < 3) {
              return Data_Maybe.Just.create({
                  x: v.x + 1 | 0,
                  y: v.y
              });
          };
          if (v1 instanceof Down && v.y < 3) {
              return Data_Maybe.Just.create({
                  y: v.y + 1 | 0,
                  x: v.x
              });
          };
          if (v1 instanceof Left && v.x > 0) {
              return Data_Maybe.Just.create({
                  x: v.x - 1 | 0,
                  y: v.y
              });
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var moveTile = function (tiles) {
      return function (move) {
          var to = posToIndex(move.to);
          var from = posToIndex(move.from);
          return Data_Maybe.fromMaybe(tiles)(Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(tiles)(from))(function (v) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(tiles)(to))(function (v1) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.updateAt(from)(v1)(tiles))(function (v2) {
                      return Data_Array.updateAt(to)(v)(v2);
                  });
              });
          }));
      };
  };
  var initialTiles = Data_Array.snoc(Data_Functor.map(Data_Functor.functorArray)(Tile.create)(Data_Array.range(1)(15)))(Null.value);
  var indexToPos = function (i) {
      return {
          x: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(4),
          y: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(4)
      };
  };
  var eqTile = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Tile && y instanceof Tile) {
              return x.value0 === y.value0;
          };
          if (x instanceof Null && y instanceof Null) {
              return true;
          };
          return false;
      };
  });
  var getTilePos = function (tiles) {
      return function (t) {
          return indexToPos(Data_Maybe.fromMaybe(0)(Data_Array.elemIndex(eqTile)(t)(tiles)));
      };
  };
  var getMovableTiles = function (tiles) {
      var to = getTilePos(tiles)(Null.value);
      return Data_Array.mapMaybe(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function (f) {
              return Data_Array.index(tiles)(posToIndex(f));
          });
      })(Data_Functor.map(Data_Functor.functorArray)(nextTilePos(to))([ Up.value, Right.value, Down.value, Left.value ]));
  };
  var shuffleTiles = function (num) {
      return function (tiles) {
          var getTileMoves = function (tiles$prime) {
              var to = getTilePos(tiles$prime)(Null.value);
              return Data_Array.mapMaybe(function (v) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
                      return {
                          from: v1,
                          to: to
                      };
                  })(v);
              })(Data_Functor.map(Data_Functor.functorArray)(nextTilePos(to))([ Up.value, Right.value, Down.value, Left.value ]));
          };
          var go = function (v) {
              if (v.value0 === 0) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(new Control_Monad_Rec_Class.Done(v.value2));
              };
              var tileMoves = Data_Array.filter(function (m) {
                  return Data_Eq.notEq(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                      return "y";
                  }))(Data_Eq.eqInt))()(new Data_Symbol.IsSymbol(function () {
                      return "x";
                  }))(Data_Eq.eqInt)))(m.from)(v.value1);
              })(getTileMoves(v.value2));
              var len = Data_Array.length(tileMoves);
              return function __do() {
                  var v1 = Effect_Random.randomInt(0)(len - 1 | 0)();
                  var v2 = Data_Array.index(tileMoves)(v1);
                  if (v2 instanceof Data_Maybe.Just) {
                      var tiles$prime$prime = moveTile(v.value2)(v2.value0);
                      return Control_Monad_Rec_Class.Loop.create(new Shuffle(v.value0 - 1 | 0, v2.value0.to, tiles$prime$prime));
                  };
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return new Control_Monad_Rec_Class.Done(v.value2);
                  };
                  throw new Error("Failed pattern match at Puzzle.Game.Tiles line 53, column 7 - line 57, column 37: " + [ v2.constructor.name ]);
              };
          };
          return Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEffect)(go)(new Shuffle(num, getTilePos(tiles)(Null.value), tiles));
      };
  };
  var ordTile = new Data_Ord.Ord(function () {
      return eqTile;
  }, function (x) {
      return function (y) {
          if (x instanceof Tile && y instanceof Tile) {
              return Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
          };
          if (x instanceof Tile) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Tile) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Null && y instanceof Null) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Puzzle.Game.Tiles line 27, column 8 - line 27, column 35: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var isFinish = (function () {
      var f = function (pre) {
          return function (tile) {
              return {
                  ret: pre.ret && Data_Ord.lessThan(ordTile)(pre.tile)(tile),
                  tile: tile
              };
          };
      };
      return function ($49) {
          return (function (v) {
              return v.ret;
          })(Data_Foldable.foldl(Data_Foldable.foldableArray)(f)({
              ret: true,
              tile: new Tile(0)
          })($49));
      };
  })();
  exports["Tile"] = Tile;
  exports["Null"] = Null;
  exports["initialTiles"] = initialTiles;
  exports["shuffleTiles"] = shuffleTiles;
  exports["getTilePos"] = getTilePos;
  exports["getMovableTiles"] = getMovableTiles;
  exports["moveTile"] = moveTile;
  exports["isFinish"] = isFinish;
  exports["eqTile"] = eqTile;
  exports["ordTile"] = ordTile;
})(PS["Puzzle.Game.Tiles"] = PS["Puzzle.Game.Tiles"] || {});
(function(exports) {

  exports._wait = function(time, tweener) {
    tweener.wait(time);
    return tweener;
  };

  exports._call = function(func, tweener) {
    tweener.call(function() {
      return func(tweener.target)();
    });

    return tweener;
  };

  exports._moveTo = function(x, y, duration, easing, tweener) {
    tweener.moveTo(x, y, duration, easing);
    return tweener;
  };

  exports._scaleTo = function(scale, duration, easing, tweener) {
    tweener.scaleTo(scale, duration, easing);
    return tweener;
  };

  exports._getTweener = function(element) {
    return element.tweener.clear();
  };
})(PS["Phina.Accessory.Tweener"] = PS["Phina.Accessory.Tweener"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var easeOutBounce = "easeOutBounce";  
  var easeInOutQuad = "easeInOutQuad";
  exports["easeInOutQuad"] = easeInOutQuad;
  exports["easeOutBounce"] = easeOutBounce;
})(PS["Phina.Util.Tween"] = PS["Phina.Util.Tween"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Accessory.Tweener"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_Types_Angle = PS["Phina.Types.Angle"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Playable = PS["Phina.Types.Playable"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_Tween = PS["Phina.Util.Tween"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var Tweenable = function (IsElement0) {
      this.IsElement0 = IsElement0;
  };
  var wait = function ($4) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn2($foreign._wait)($4));
  };
  var scaleTo = function (scale) {
      return function (duration) {
          return function (easing) {
              return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn4($foreign._scaleTo)(scale)(duration)(easing));
          };
      };
  };
  var moveTo = function (x) {
      return function (y) {
          return function (duration) {
              return function (easing) {
                  return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn5($foreign._moveTo)(x)(y)(duration)(easing));
              };
          };
      };
  };
  var getTweener = function (dictTweenable) {
      return Effect_Uncurried.runEffectFn1($foreign._getTweener);
  };                                                                   
  var call = function ($8) {
      return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Effect_Uncurried.runEffectFn2($foreign._call)($8));
  };
  var animate = function (dictTweenable) {
      return function (tween) {
          return function (element) {
              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](element))(Control_Bind.bind(Effect.bindEffect)(getTweener(dictTweenable)(element))(Phina_Types_Monad_Builder.build(Phina_Types_Builder.monadBuilderBuilder)(tween)));
          };
      };
  };
  exports["Tweenable"] = Tweenable;
  exports["wait"] = wait;
  exports["call"] = call;
  exports["moveTo"] = moveTo;
  exports["scaleTo"] = scaleTo;
  exports["animate"] = animate;
})(PS["Phina.Accessory.Tweener"] = PS["Phina.Accessory.Tweener"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Prelude = PS["Prelude"];                 
  var animateB = function (dictTweenable) {
      return function ($2) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Accessory_Tweener.animate(dictTweenable)($2));
      };
  };
  exports["animateB"] = animateB;
})(PS["Phina.Accessory.Tweener.Builder"] = PS["Phina.Accessory.Tweener.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Phina.Display.DisplayElement"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Types_Angle = PS["Phina.Types.Angle"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var IsDisplayElement = function (Interactive1, IsElement0) {
      this.Interactive1 = Interactive1;
      this.IsElement0 = IsElement0;
  };
  var hasPropertyDisplayElementProps = function (dictHasProperty) {
      return function (dictHasProperty1) {
          return function (dictHasProperty2) {
              return function (dictUnion) {
                  return function (dictUnion1) {
                      return function (dictUnion2) {
                          return Phina_Types_Property.HasProperty;
                      };
                  };
              };
          };
      };
  };
  exports["IsDisplayElement"] = IsDisplayElement;
  exports["hasPropertyDisplayElementProps"] = hasPropertyDisplayElementProps;
})(PS["Phina.Display.DisplayElement"] = PS["Phina.Display.DisplayElement"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Effect = PS["Effect"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Unsafe = PS["Phina.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Proxy = PS["Type.Proxy"];                 
  var IsShape = function (IsDisplayElement0, shape) {
      this.IsDisplayElement0 = IsDisplayElement0;
      this.shape = shape;
  };
  var shape = function (dict) {
      return dict.shape;
  };
  var unsafeNewShape = function (dictIsShape) {
      return function (params) {
          return function __do() {
              var v = Phina_Unsafe.unsafeNew("display")(shape(dictIsShape)(Type_Proxy["Proxy"].value))({})();
              return Phina_Unsafe.unsafeSetProps(params)(v)();
          };
      };
  };
  var newShape = function (dictIsShape) {
      return function (dictWritable) {
          return unsafeNewShape(dictIsShape);
      };
  };
  var hasPropertyShape = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };
  exports["IsShape"] = IsShape;
  exports["shape"] = shape;
  exports["newShape"] = newShape;
  exports["hasPropertyShape"] = hasPropertyShape;
})(PS["Phina.Display.Shape"] = PS["Phina.Display.Shape"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var hasPropertyLabel = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };
  var setText = Phina_Types_Property.setProp(new Data_Symbol.IsSymbol(function () {
      return "text";
  }))(Phina_Types_Property.writableProp(hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Data_Symbol.SProxy.value);
  var edLabel = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveLabel = new Phina_App_Interactive.Interactive(function () {
      return edLabel;
  });
  var isElementLabel = new Phina_App_Element.IsElement(function () {
      return edLabel;
  });
  var isDeLabel = new Phina_Display_DisplayElement.IsDisplayElement(function () {
      return interactiveLabel;
  }, function () {
      return isElementLabel;
  });
  var isShapeLabel = new Phina_Display_Shape.IsShape(function () {
      return isDeLabel;
  }, function (v) {
      return "Label";
  });
  var newLabel = function (dictWritable) {
      return Phina_Display_Shape.newShape(isShapeLabel)(dictWritable);
  };                                                                  
  var tweenableLabel = new Phina_Accessory_Tweener.Tweenable(function () {
      return isElementLabel;
  });
  exports["newLabel"] = newLabel;
  exports["setText"] = setText;
  exports["hasPropertyLabel"] = hasPropertyLabel;
  exports["isShapeLabel"] = isShapeLabel;
  exports["edLabel"] = edLabel;
  exports["isElementLabel"] = isElementLabel;
  exports["isDeLabel"] = isDeLabel;
  exports["interactiveLabel"] = interactiveLabel;
  exports["tweenableLabel"] = tweenableLabel;
})(PS["Phina.Display.Label"] = PS["Phina.Display.Label"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Effect = PS["Effect"];
  var Phina_Accessory_Draggable = PS["Phina.Accessory.Draggable"];
  var Phina_Accessory_Flickable = PS["Phina.Accessory.Flickable"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];                 
  var hasPropertyRectangleShape = function (dictHasProperty) {
      return function (dictUnion) {
          return Phina_Types_Property.HasProperty;
      };
  };                                                                
  var edRectangleShape = Phina_Util_EventDispatcher_Class.EventDispatcher;
  var interactiveRectangleShape = new Phina_App_Interactive.Interactive(function () {
      return edRectangleShape;
  });
  var isElementRectangleShape = new Phina_App_Element.IsElement(function () {
      return edRectangleShape;
  });
  var isDeRectangleShape = new Phina_Display_DisplayElement.IsDisplayElement(function () {
      return interactiveRectangleShape;
  }, function () {
      return isElementRectangleShape;
  });
  var isShapeRectangleShape = new Phina_Display_Shape.IsShape(function () {
      return isDeRectangleShape;
  }, function (v) {
      return "RectangleShape";
  });
  var newRectangleShape = function (dictWritable) {
      return Phina_Display_Shape.newShape(isShapeRectangleShape)(dictWritable);
  };                                                                                    
  var tweenableRectangleShape = new Phina_Accessory_Tweener.Tweenable(function () {
      return isElementRectangleShape;
  });
  var containerRectangleShape = Phina_App_Element.Container;
  exports["newRectangleShape"] = newRectangleShape;
  exports["hasPropertyRectangleShape"] = hasPropertyRectangleShape;
  exports["isShapeRectangleShape"] = isShapeRectangleShape;
  exports["edRectangleShape"] = edRectangleShape;
  exports["isElementRectangleShape"] = isElementRectangleShape;
  exports["containerRectangleShape"] = containerRectangleShape;
  exports["isDeRectangleShape"] = isDeRectangleShape;
  exports["interactiveRectangleShape"] = interactiveRectangleShape;
  exports["tweenableRectangleShape"] = tweenableRectangleShape;
})(PS["Phina.Display.RectangleShape"] = PS["Phina.Display.RectangleShape"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Prelude = PS["Prelude"];
  var setPositionB = function (dictWritable) {
      return function ($3) {
          return Phina_Types_Monad_Builder.update(Phina_Types_Builder.monadBuilderBuilder)(Phina_Types_Position.setPosition(dictWritable)($3));
      };
  };
  exports["setPositionB"] = setPositionB;
})(PS["Phina.Types.Position.Builder"] = PS["Phina.Types.Position.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Prelude = PS["Prelude"];
  var getSizeB = function (dictReadable) {
      return Phina_Types_Monad_Builder["eval"](Phina_Types_Builder.monadBuilderBuilder)(Phina_Types_Size.getSize(dictReadable));
  };
  exports["getSizeB"] = getSizeB;
})(PS["Phina.Types.Size.Builder"] = PS["Phina.Types.Size.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var getCenterPosB = function (dictHasGrid) {
      return Phina_Types_Monad_Builder["eval"](Phina_Types_Builder.monadBuilderBuilder)(Phina_Util_Grid.getCenterPos(dictHasGrid));
  };
  exports["getCenterPosB"] = getCenterPosB;
})(PS["Phina.Util.Grid.Builder"] = PS["Phina.Util.Grid.Builder"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Phina = PS["Phina"];
  var Phina_Util_Grid = PS["Phina.Util.Grid"];
  var Prelude = PS["Prelude"];
  var Puzzle_Game_Tiles = PS["Puzzle.Game.Tiles"];                 
  var newGrids = function (width) {
      return function (marginTop) {
          return function (marginSide) {
              var width$prime = width - marginSide * 2.0;
              return {
                  x: Phina_Util_Grid.newGrid(width$prime)(4)(false)(width / 8.0 + marginSide),
                  y: Phina_Util_Grid.newGrid(width$prime)(4)(false)(width / 8.0 + marginTop)
              };
          };
      };
  };
  var getGridsUnit = function ($1) {
      return Phina_Util_Grid.getUnit((function (v) {
          return v.x;
      })($1));
  };
  var calcTilePosition = function (grids) {
      return function (pos) {
          return {
              x: Phina_Util_Grid.getSpan(pos.x)(grids.x),
              y: Phina_Util_Grid.getSpan(pos.y)(grids.y)
          };
      };
  };
  exports["newGrids"] = newGrids;
  exports["calcTilePosition"] = calcTilePosition;
  exports["getGridsUnit"] = getGridsUnit;
})(PS["Puzzle.View.Grids"] = PS["Puzzle.View.Grids"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Number_Format = PS["Data.Number.Format"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Phina = PS["Phina"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Color = PS["Phina.Types.Color"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Phina_Types_Numerical = PS["Phina.Types.Numerical"];
  var Phina_Util_Tween = PS["Phina.Util.Tween"];
  var Prelude = PS["Prelude"];                 
  var timeText = function ($2) {
      return (function (v) {
          return v + " sec";
      })(Data_Number_Format.toStringWith(Data_Number_Format.fixed(2))(Phina_Types_Duration.toSec($2)));
  };
  var tileMotion = function (pos) {
      return Phina_Accessory_Tweener.moveTo(pos.x)(pos.y)(Phina_Types_Duration.msec(Phina_Types_Numerical.numericalInt)(200))(Phina_Util_Tween.easeInOutQuad);
  };
  var tileColors = (function () {
      var rl = [ "b" ];
      var gl = [ "e", "d", "c", "b" ];
      return Data_Array.take(15)(Control_Apply.apply(Control_Apply.applyArray)(Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(function (r) {
          return function (g) {
              return function (b) {
                  return Phina_Types_Color.color("#" + (r + (g + b)));
              };
          };
      })(rl))(gl))(gl));
  })();
  var style = {
      game: {
          title: "15 puzzle",
          message: "15 puzzle",
          hashtags: "phina_js,game,purescript"
      },
      scene: {
          backgroundColor: Phina_Types_Color.color("#666")
      },
      countScene: {
          backgroundColor: Phina_Types_Color.color("rgba(0, 0, 0, 0.5)")
      },
      timeLabel: function (pos) {
          return {
              x: pos.x - 80.0,
              y: pos.y + 64.0,
              text: timeText(Data_Semiring.zero(Phina_Types_Duration.semiringDuration)),
              fontSize: 52.0,
              fontFamily: "monospace",
              fontWeight: "bold",
              align: "right",
              fill: Phina_Types_Color.color("white"),
              stroke: Phina_Types_Color.color("black"),
              strokeWidth: 2.0
          };
      },
      timeText: timeText,
      tilesLayout: {
          marginTop: 160.0,
          marginSide: 16.0
      },
      tileShape: function (size) {
          return function (col) {
              return {
                  width: size - 12.0,
                  height: size - 12.0,
                  cornerRadius: 16.0,
                  fill: col,
                  stroke: Phina_Types_Color.color("white"),
                  strokeWidth: 4.0,
                  shadow: Phina_Types_Color.color("black"),
                  shadowBlur: 12.0,
                  padding: 12.0
              };
          };
      },
      tileLabel: function (v) {
          return {
              text: v,
              fontSize: 64.0,
              fontWeight: "bold",
              fill: Phina_Types_Color.color("white"),
              stroke: Phina_Types_Color.color("black"),
              strokeWidth: 2.0,
              shadow: Phina_Types_Color.color("black"),
              shadowBlur: 8.0
          };
      },
      finishMask: function (pos) {
          return function (size) {
              return {
                  x: pos.x,
                  y: pos.y,
                  width: size.width,
                  height: size.height,
                  padding: 0.0,
                  fill: Phina_Types_Color.color("rgba(0, 0, 0, 0.5)"),
                  stroke: Phina_Types_Color.nullColor
              };
          };
      },
      finishLabel: {
          text: "Finish!",
          scaleX: 0.1,
          scaleY: 0.1,
          fontSize: 128.0,
          fontWeight: "bold",
          fill: Phina_Types_Color.color("white"),
          stroke: Phina_Types_Color.color("black"),
          strokeWidth: 2.0,
          shadow: Phina_Types_Color.color("black"),
          shadowBlur: 8.0
      }
  };
  var finishMotion = Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Accessory_Tweener.scaleTo(1.0)(Phina_Types_Duration.sec(Phina_Types_Numerical.numericalInt)(2))(Phina_Util_Tween.easeOutBounce))(function () {
      return Phina_Accessory_Tweener.wait(Phina_Types_Duration.sec(Phina_Types_Numerical.numericalInt)(1));
  });
  exports["style"] = style;
  exports["tileColors"] = tileColors;
  exports["tileMotion"] = tileMotion;
  exports["finishMotion"] = finishMotion;
})(PS["Puzzle.View.Style"] = PS["Puzzle.View.Style"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Phina = PS["Phina"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Display_RectangleShape = PS["Phina.Display.RectangleShape"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Types_Position = PS["Phina.Types.Position"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Prelude = PS["Prelude"];
  var Puzzle_View_Style = PS["Puzzle.View.Style"];
  var Type_Row = PS["Type.Row"];                 
  var wakeUpTileShapes = function (nos) {
      return function (shapes) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Phina_App_Interactive.setInteractive(Phina_Display_RectangleShape.interactiveRectangleShape)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(true))(Data_Array.mapMaybe(function (v) {
              return Data_Array.index(shapes)(v);
          })(nos));
      };
  };
  var sleepAllTileShapes = Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Phina_App_Interactive.setInteractive(Phina_Display_RectangleShape.interactiveRectangleShape)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(false));
  var setTileShapesPosition = function (noToPosition) {
      return function (shapes) {
          var setShapePosition = function (no) {
              return function (shape) {
                  return Phina_Types_Position.setPosition(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(noToPosition(no))(shape);
              };
          };
          return Data_Functor["void"](Effect.functorEffect)(Data_Array.zipWithA(Effect.applicativeEffect)(setShapePosition)(Data_Array.range(1)(15))(shapes));
      };
  };
  var newTileShapes = function (dictEvent) {
      return function (dictContainer) {
          return function (dictEventDispatcher) {
              return function (size) {
                  return function (event) {
                      return function (container) {
                          var makeShape = function (no) {
                              return function (color) {
                                  return function __do() {
                                      var v = Phina_Display_RectangleShape.newRectangleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))))))))))(Puzzle_View_Style.style.tileShape(size)(color))();
                                      var v1 = Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))))(Puzzle_View_Style.style.tileLabel(Data_Show.show(Data_Show.showInt)(no)))();
                                      var v2 = Phina_App_Element.addChild(Phina_Display_Label.isElementLabel)(Phina_Display_RectangleShape.containerRectangleShape)(v1)(v)();
                                      var v3 = Phina_App_Element.addChild(Phina_Display_RectangleShape.isElementRectangleShape)(dictContainer)(v)(container)();
                                      return Phina_App_Interactive.onPointEnd(Phina_Display_RectangleShape.interactiveRectangleShape)(function (v4) {
                                          return function (v5) {
                                              return Phina_Util_EventDispatcher.flare(dictEvent)(dictEventDispatcher)(event)(no)(container);
                                          };
                                      })(v)();
                                  };
                              };
                          };
                          return Data_Array.zipWithA(Effect.applicativeEffect)(makeShape)(Data_Array.range(1)(15))(Puzzle_View_Style.tileColors);
                      };
                  };
              };
          };
      };
  };
  var moveTileShape = function (i) {
      return function (pos) {
          return function (shapes) {
              var v = Data_Array.index(shapes)(i);
              if (v instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Effect.functorEffect)(Phina_Accessory_Tweener.animate(Phina_Display_RectangleShape.tweenableRectangleShape)(Puzzle_View_Style.tileMotion(pos))(v.value0));
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  exports["newTileShapes"] = newTileShapes;
  exports["setTileShapesPosition"] = setTileShapesPosition;
  exports["moveTileShape"] = moveTileShape;
  exports["sleepAllTileShapes"] = sleepAllTileShapes;
  exports["wakeUpTileShapes"] = wakeUpTileShapes;
})(PS["Puzzle.View.TileShapes"] = PS["Puzzle.View.TileShapes"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Phina = PS["Phina"];
  var Phina_Accessory_Tweener = PS["Phina.Accessory.Tweener"];
  var Phina_Accessory_Tweener_Builder = PS["Phina.Accessory.Tweener.Builder"];
  var Phina_App_Element = PS["Phina.App.Element"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_App_Interactive = PS["Phina.App.Interactive"];
  var Phina_Display_DisplayElement = PS["Phina.Display.DisplayElement"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Display_Label = PS["Phina.Display.Label"];
  var Phina_Display_RectangleShape = PS["Phina.Display.RectangleShape"];
  var Phina_Display_Shape = PS["Phina.Display.Shape"];
  var Phina_Game_Scene = PS["Phina.Game.Scene"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Position_Builder = PS["Phina.Types.Position.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Types_Size = PS["Phina.Types.Size"];
  var Phina_Types_Size_Builder = PS["Phina.Types.Size.Builder"];
  var Phina_Util_EventDispatcher = PS["Phina.Util.EventDispatcher"];
  var Phina_Util_EventDispatcher_Class = PS["Phina.Util.EventDispatcher.Class"];
  var Phina_Util_Grid_Builder = PS["Phina.Util.Grid.Builder"];
  var Prelude = PS["Prelude"];
  var Puzzle_Game_Tiles = PS["Puzzle.Game.Tiles"];
  var Puzzle_View_Grids = PS["Puzzle.View.Grids"];
  var Puzzle_View_Style = PS["Puzzle.View.Style"];
  var Puzzle_View_TileShapes = PS["Puzzle.View.TileShapes"];
  var Type_Prelude = PS["Type.Prelude"];
  var Type_Row = PS["Type.Row"];                 
  var EventMove = (function () {
      function EventMove() {

      };
      EventMove.value = new EventMove();
      return EventMove;
  })();
  var EventFinish = (function () {
      function EventFinish() {

      };
      EventFinish.value = new EventFinish();
      return EventFinish;
  })();
  var updateTimeView = function (time) {
      return function (view) {
          return Data_Functor["void"](Effect.functorEffect)(Phina_Display_Label.setText(Puzzle_View_Style.style.timeText(time))(view.timeLabel));
      };
  };
  var startView = function (view) {
      var countScene = Phina_Game_Scene["toSceneHandle'"](Phina_Game_Scene.isGameSceneCountScene)(function (v) {
          return function (v1) {
              return Phina_Types_Property.setProps(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Game_Scene.hasPropertyCountScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))(Puzzle_View_Style.style.countScene);
          };
      });
      return Data_Functor["void"](Effect.functorEffect)(Phina_Display_DisplayScene["popup'"](Phina_Game_Scene.isSceneCountScene)(Phina_Display_DisplayScene.isSceneDisplayScene)(countScene)({
          count: Phina_Game_Scene.countDefault
      })(view.scene));
  };
  var setTilesView = function (tiles) {
      return function (view) {
          var noToPosition = function ($28) {
              return Puzzle_View_Grids.calcTilePosition(view.grids)(Puzzle_Game_Tiles.getTilePos(tiles)(Puzzle_Game_Tiles.Tile.create($28)));
          };
          return Puzzle_View_TileShapes.setTileShapesPosition(noToPosition)(view.shapes);
      };
  };
  var setInteractiveView = function (tiles) {
      return function (view) {
          var getShapeNo = function (v) {
              if (v instanceof Puzzle_Game_Tiles.Tile) {
                  return new Data_Maybe.Just(v.value0 - 1 | 0);
              };
              if (v instanceof Puzzle_Game_Tiles.Null) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Puzzle.View line 81, column 5 - line 81, column 41: " + [ v.constructor.name ]);
          };
          return function __do() {
              Puzzle_View_TileShapes.sleepAllTileShapes(view.shapes)();
              return Puzzle_View_TileShapes.wakeUpTileShapes(Data_Array.mapMaybe(getShapeNo)(tiles))(view.shapes)();
          };
      };
  };
  var moveTileView = function (v) {
      return function (v1) {
          return function (v2) {
              if (v instanceof Puzzle_Game_Tiles.Tile) {
                  var pos = Puzzle_View_Grids.calcTilePosition(v2.grids)(v1);
                  return Puzzle_View_TileShapes.moveTileShape(v.value0 - 1 | 0)(pos)(v2.shapes);
              };
              if (v instanceof Puzzle_Game_Tiles.Null) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Puzzle.View line 69, column 1 - line 69, column 57: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var eventEventMove = new Phina_Util_EventDispatcher_Class.Event(function (v) {
      return "move";
  });
  var newPuzzleView = function (scene) {
      return function __do() {
          var v = Phina_Types_Property.setProps(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))(Puzzle_View_Style.style.scene)(scene)();
          var v1 = Phina_Types_Property.getProp(new Data_Symbol.IsSymbol(function () {
              return "width";
          }))(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Data_Symbol.SProxy.value)(scene)();
          var v2 = Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))))))(Puzzle_View_Style.style.timeLabel({
              x: v1,
              y: 0.0
          }))();
          var v3 = Phina_App_Element.addChild(Phina_Display_Label.isElementLabel)(Phina_Display_DisplayScene.containerDisplayScene)(v2)(scene)();
          var grids = Puzzle_View_Grids.newGrids(v1)(Puzzle_View_Style.style.tilesLayout.marginTop)(Puzzle_View_Style.style.tilesLayout.marginSide);
          var tileWidth = Puzzle_View_Grids.getGridsUnit(grids);
          var v4 = Puzzle_View_TileShapes.newTileShapes(eventEventMove)(Phina_Display_DisplayScene.containerDisplayScene)(Phina_Display_DisplayScene.edDisplayScene)(tileWidth)(EventMove.value)(scene)();
          return {
              scene: scene,
              grids: grids,
              timeLabel: v2,
              shapes: v4
          };
      };
  };
  var eventEventFinish = new Phina_Util_EventDispatcher_Class.Event(function (v) {
      return "finish";
  });
  var finishView = function (time) {
      return function (view) {
          return function __do() {
              Puzzle_View_TileShapes.sleepAllTileShapes(view.shapes)();
              return Data_Functor["void"](Effect.functorEffect)(Data_Function.flip(Phina_Types_Monad_Builder.build(Phina_Types_Builder.monadBuilderBuilder))(view.scene)(Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Phina_Types_Monad_Builder.peek(Phina_Types_Builder.monadBuilderBuilder))(function (v) {
                  return Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Phina_Util_Grid_Builder.getCenterPosB(Phina_Display_DisplayScene.hasGridDisplayScene))(function (v1) {
                      return Control_Bind.bind(Phina_Types_Builder.bindBuilder)(Phina_Types_Size_Builder.getSizeB(Phina_Types_Property.readableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.readableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.readableProp(Phina_Display_DisplayScene.hasPropertyDisplayScene(Phina_Display_DisplayScene.hasPropertySceneProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()()))(Phina_Types_Property.writableAttrWrite)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.readableRLNil)))))(function (v2) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_App_Element_Builder["addChildB'"](Phina_Display_RectangleShape.isElementRectangleShape)(Phina_Display_DisplayScene.containerDisplayScene)(Phina_Display_RectangleShape.newRectangleShape(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_RectangleShape.hasPropertyRectangleShape(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil)))))))))(Puzzle_View_Style.style.finishMask(v1)(v2))))(function () {
                              return Phina_App_Element_Builder["addChildB'"](Phina_Display_Label.isElementLabel)(Phina_Display_DisplayScene.containerDisplayScene)(Phina_Types_Monad_Builder.make(Phina_Types_Builder.monadBuilderBuilder)(Phina_Display_Label.newLabel(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))))))))))(Puzzle_View_Style.style.finishLabel))(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Types_Position_Builder.setPositionB(Phina_Types_Property.writableRecord()(Type_Row.listToCons(Type_Row.listToCons(Type_Row.listToRowNil)())())(Phina_Types_Property.writableRLCons()()(Type_Row.listToCons(Type_Row.listToRowNil)())(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLCons()()(Type_Row.listToRowNil)(Phina_Types_Property.writableProp(Phina_Display_Label.hasPropertyLabel(Phina_Display_Shape.hasPropertyShape(Phina_Display_DisplayElement.hasPropertyDisplayElementProps(Phina_Types_Size.hasPropertySize)(Phina_App_Element.hasPropertyElement)(Phina_App_Interactive.hasPropertyInteractive)()()())())())(Phina_Types_Property.readableAttrRead)()(Phina_Types_Row.subRowInstance()))(Phina_Types_Property.writableRLNil))))(v1))(function () {
                                  return Phina_Accessory_Tweener_Builder.animateB(Phina_Display_Label.tweenableLabel)(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Puzzle_View_Style.finishMotion)(function () {
                                      return Phina_Accessory_Tweener.call(function (l) {
                                          return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](l))(Phina_Util_EventDispatcher.flare(eventEventFinish)(Phina_Display_DisplayScene.edDisplayScene)(EventFinish.value)({
                                              score: Puzzle_View_Style.style.timeText(time)
                                          })(v));
                                      });
                                  }));
                              })));
                          });
                      });
                  });
              })))();
          };
      };
  };
  exports["EventMove"] = EventMove;
  exports["EventFinish"] = EventFinish;
  exports["newPuzzleView"] = newPuzzleView;
  exports["setTilesView"] = setTilesView;
  exports["moveTileView"] = moveTileView;
  exports["setInteractiveView"] = setInteractiveView;
  exports["updateTimeView"] = updateTimeView;
  exports["startView"] = startView;
  exports["finishView"] = finishView;
  exports["eventEventMove"] = eventEventMove;
  exports["eventEventFinish"] = eventEventFinish;
})(PS["Puzzle.View"] = PS["Puzzle.View"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Phina = PS["Phina"];
  var Phina_Types_Duration = PS["Phina.Types.Duration"];
  var Prelude = PS["Prelude"];
  var Puzzle_Game_Tiles = PS["Puzzle.Game.Tiles"];
  var Puzzle_View = PS["Puzzle.View"];                 
  var updateTime = function (delta) {
      return function (game) {
          return function __do() {
              var v = Effect_Ref.read(game.isFinish)();
              return Control_Applicative.unless(Effect.applicativeEffect)(v)(function __do() {
                  var v1 = Effect_Ref.modify(function (v1) {
                      return Data_Semiring.add(Phina_Types_Duration.semiringDuration)(v1)(delta);
                  })(game.timeRef)();
                  return Puzzle_View.updateTimeView(v1)(game.view)();
              })();
          };
      };
  };
  var shuffleTimes = 100;
  var newPuzzleGame = function (view) {
      return function __do() {
          var v = Puzzle_Game_Tiles.shuffleTiles(shuffleTimes)(Puzzle_Game_Tiles.initialTiles)();
          var v1 = Effect_Ref["new"](v)();
          var v2 = Effect_Ref["new"](Data_Semiring.zero(Phina_Types_Duration.semiringDuration))();
          var v3 = Effect_Ref["new"](false)();
          Puzzle_View.setTilesView(v)(view)();
          Puzzle_View.setInteractiveView(Puzzle_Game_Tiles.getMovableTiles(v))(view)();
          Puzzle_View.startView(view)();
          return {
              tilesRef: v1,
              timeRef: v2,
              isFinish: v3,
              view: view
          };
      };
  };
  var moveTileByNo = function (no) {
      return function (game) {
          return function __do() {
              var v = Effect_Ref.read(game.tilesRef)();
              var to = Puzzle_Game_Tiles.getTilePos(v)(Puzzle_Game_Tiles.Null.value);
              var from = Puzzle_Game_Tiles.getTilePos(v)(new Puzzle_Game_Tiles.Tile(no));
              var tiles$prime = Puzzle_Game_Tiles.moveTile(v)({
                  from: from,
                  to: to
              });
              Effect_Ref.write(tiles$prime)(game.tilesRef)();
              Puzzle_View.moveTileView(new Puzzle_Game_Tiles.Tile(no))(to)(game.view)();
              var $17 = Puzzle_Game_Tiles.isFinish(tiles$prime);
              if ($17) {
                  var v1 = Effect_Ref.write(true)(game.isFinish)();
                  var v2 = Effect_Ref.read(game.timeRef)();
                  return Puzzle_View.finishView(v2)(game.view)();
              };
              return Puzzle_View.setInteractiveView(Puzzle_Game_Tiles.getMovableTiles(tiles$prime))(game.view)();
          };
      };
  };
  exports["newPuzzleGame"] = newPuzzleGame;
  exports["updateTime"] = updateTime;
  exports["moveTileByNo"] = moveTileByNo;
})(PS["Puzzle.Game"] = PS["Puzzle.Game"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Symbol = PS["Data.Symbol"];
  var Effect = PS["Effect"];
  var Phina = PS["Phina"];
  var Phina_App_Element_Builder = PS["Phina.App.Element.Builder"];
  var Phina_Display_DisplayScene = PS["Phina.Display.DisplayScene"];
  var Phina_Game_GameApp = PS["Phina.Game.GameApp"];
  var Phina_Types_Builder = PS["Phina.Types.Builder"];
  var Phina_Types_Monad_Builder = PS["Phina.Types.Monad.Builder"];
  var Phina_Types_Property = PS["Phina.Types.Property"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Phina_Util_EventDispatcher_Builder = PS["Phina.Util.EventDispatcher.Builder"];
  var Prelude = PS["Prelude"];
  var Puzzle_Game = PS["Puzzle.Game"];
  var Puzzle_View = PS["Puzzle.View"];
  var Type_Prelude = PS["Type.Prelude"];                 
  var setupScene = function (v) {
      return function (exit) {
          return function (scene) {
              return function __do() {
                  var v1 = Puzzle_View.newPuzzleView(scene)();
                  var v2 = Puzzle_Game.newPuzzleGame(v1)();
                  return Phina_Types_Monad_Builder.build(Phina_Types_Builder.monadBuilderBuilder)(Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_App_Element_Builder.setUpdaterB(Phina_Display_DisplayScene.isElementDisplayScene)(function (app) {
                      return function (s) {
                          return function __do() {
                              var v3 = Phina_Types_Property.getProp(new Data_Symbol.IsSymbol(function () {
                                  return "deltaTime";
                              }))(Phina_Types_Property.readableProp(Phina_Game_GameApp.hasPropertyGameApp(Phina_Game_GameApp.hasPropertyGameAppReady)())(Phina_Types_Property.writableAttrDash)()(Phina_Types_Row.subRowInstance()))(Data_Symbol.SProxy.value)(app)();
                              return Puzzle_Game.updateTime(v3)(v2)();
                          };
                      };
                  }))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Phina_Types_Builder.bindBuilder)(Phina_Util_EventDispatcher_Builder.onB(Puzzle_View.eventEventMove)(Phina_Display_DisplayScene.edDisplayScene)(Puzzle_View.EventMove.value)(function (no) {
                          return function (s) {
                              return Data_Functor.map(Effect.functorEffect)(Data_Function["const"](s))(Puzzle_Game.moveTileByNo(no)(v2));
                          };
                      }))(function () {
                          return Phina_Util_EventDispatcher_Builder.onB(Puzzle_View.eventEventFinish)(Phina_Display_DisplayScene.edDisplayScene)(Puzzle_View.EventFinish.value)(function (result) {
                              return function (s) {
                                  return exit(result)(s);
                              };
                          });
                      });
                  }))(scene)();
              };
          };
      };
  };
  exports["setupScene"] = setupScene;
})(PS["Puzzle.Scene"] = PS["Puzzle.Scene"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Phina = PS["Phina"];
  var Phina_Main = PS["Phina.Main"];
  var Phina_Types_Row = PS["Phina.Types.Row"];
  var Prelude = PS["Prelude"];
  var Puzzle_Scene = PS["Puzzle.Scene"];
  var Puzzle_View_Style = PS["Puzzle.View.Style"];                 
  var main = function __do() {
      var v = Phina_Main.newGame(Phina_Types_Row.subRowInstance())(Puzzle_View_Style.style.game)(new Phina_Main.SceneListDefault(Phina_Main.Splash.value, Puzzle_Scene.setupScene))();
      return Phina_Main.runGame(v)();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
},{}]},{},[1]);
